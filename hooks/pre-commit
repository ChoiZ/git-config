#!/bin/sh
# Last modified: 2015-01-25
# Author: François LASSERRE <choiz@me.com>
# License: GNU GPL http://www.gnu.org/licenses/gpl.html

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

checkphp=$(git config --global --get hooks.checkphp)
checkjs=$(git config --global --get hooks.checkjs)

# Redirect output to stderr.
exec 1>&2

extensions=$(git diff --cached --name-only --diff-filter=ACMRT $against | rev | cut -d . -f1 | rev | sort | uniq)
path=$(pwd)

for extension in $extensions
do
    case $extension in
        php)
            if [ "$checkphp" == "true" ]
            then
                files=$(git diff --cached --name-only --diff-filter=ACMRT $against | grep .php)
                echo "-------------------"
                echo "Checking php files…"
                echo "-------------------"
                echo
                for file in $files
                do
                    php_debug=$(grep -wiE 'var_dump|die|exit|print_r' $path/$file 2>&1)

                    if [ -n "$php_debug" ]; then
                        if [ -n "$php_files" ]; then
                            php_files="$php_files, $file"
                        else
                            php_files="$file"
                        fi
                    fi

                    php_errors=$(php -l $path/$file 2>&1 | grep "Parse error")

                    if [ -n "$php_errors" ]; then
                        if [ -n "$php_error" ]; then
                            php_error="$php_error \n$php_errors"
                        else
                            php_error="$php_errors"
                        fi
                    fi
                done

                phperror=false

                if [ -n "$php_files" ]; then
                    phperror=true
                    error=true
                    echo "$php_files files found debug message"
                    echo "Please remove 'var_dump|die|exit|print_r' from source code."
                    echo
                fi

                if [ -n "$php_error" ]; then
                    phperror=true
                    error=true
                    echo $php_error
                    echo
                fi

                if [ "$phperror" == "false" ]; then
                    echo "No syntax errors detected."
                    echo
                fi

            fi
        ;;
        js)
            if [ "$checkjs" == "true" ]
            then
                files=$(git diff --cached --name-only --diff-filter=ACMRT $against | grep .js)
                echo "-------------------"
                echo "Checking js files…"
                echo "-------------------"
                echo
                for file in $files
                do
                    js_debug=$(grep -i -e 'console\.' $path/$file 2>&1)

                    if [ -n "$js_debug" ]; then
                        if [ -n "$js_files" ]; then
                            js_files="$js_files, $file"
                        else
                            js_files="$file"
                        fi
                    fi
                done

                if [ -n "$js_files" ]; then
                    error=true
                    echo "$js_files files found debug message"
                    echo "Please remove 'console.[log|info|warn|…] debug message' from source code."
                    echo
                else
                    echo "No debug message detected."
                    echo
                fi

            fi
        ;;
    esac
done

if [ -n "$error" ]; then
    echo "-------------------------------"
    echo "Can't commit, fix errors first."
    echo "-------------------------------"
    echo
    if [ "$checkphp" == "true" ] || [ "$checkjs" == "true" ]; then
        echo "If you know what you are doing you can disable this checks using:"
        echo
    fi
    if [ "$checkphp" == "true" ]; then
        echo "  git config --global --add hooks.checkphp false"
    fi
    if [ "$checkjs" == "true" ]; then
        echo "  git config --global --add hooks.checkjs false"
    fi
    echo
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
